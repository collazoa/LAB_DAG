library(tidyverse)

########################################################
# setting number of random draws 
B=5000

########################################################
# setting parameter values 

# E Bernoulli prob_E
# L is normal with mean_L and sd_L
# Y = b_0 + b_1*E + b_2*L + rnorm(0,sd_Y)
# W = g_0 + g_1*E + g_2*L + rnorm(0, sd_W)

prob_E = 0.5
mean_L = 25  
sd_L = 5
b_0 = 50 
b_1 = c(0) 
b_2 = 4 
g_0 = 3
g_1 = c(-10,-30,-60)   
g_2 = c(-10)  
sd_Y = 10 
sd_W = 2
cutoff_W = c(0.2, 0.3,0.5)
n = c(10, 20, 50) #total number of animals in the experiment

report <- expand_grid(prob_E, mean_L, 
                      sd_L, b_0, b_1, 
                      b_2, g_0, g_1, 
                      g_2, sd_Y, sd_W, 
                      cutoff_W, n)


######################################################################


######################################################################
# simulation of B random draws with set parameter values 

# preparation of empty matrix for model 1, model 2 & model 3 
# for later storage of values from replications 
m2 <- matrix(NA_real_, ncol=B, nrow=nrow(report))
m3 <- matrix(NA_real_, ncol=B, nrow=nrow(report))
m1 <- matrix(NA_real_, ncol=B, nrow=nrow(report))

# ensure reproducibility of random draw 
set.seed(100)

######################################################################
# function for replication draws 

# here starts the counting of the row
for (i in 1:nrow(report)) {
  
  # here starts the loop in b
  for (b in 1:B) {
    
    # create the dataset
    dat <- data.frame(E = rep(0:1,report$prob_E[i]*report$n[i], each=1),
                      L = rnorm(n=report$n[i], mean=report$mean_L[i], 
                                sd=report$sd_L[i]))
    dat$W <- report$g_0[i] + report$g_1[i]*dat$E + report$g_2[i]*dat$L + rnorm(report$n[i], 0, report$sd_W[i])
    dat$Y <- report$b_0[i] + report$b_1[i]*dat$E + report$b_2[i]*dat$L + rnorm(report$n[i], 0, report$sd_Y[i])
    dat$S <- dat$W >= quantile(dat$W, probs=report$cutoff_W[i]) 
    dat_s <- dat %>% filter(S==TRUE)
    m2[i,b] =  mean(dat_s$Y[dat_s$E==1]) - mean(dat_s$Y[dat_s$E==0])

    m1[i,b] = mean(dat$Y[dat$E==1]) - mean(dat$Y[dat$E==0])

    model<-lm(Y ~ E + L, data = dat_s)
    m3[i,b]<-model$coefficients[2]
  }
}

################################################################################


################################################################################
# adding means of simulated values to the report table 
report$m1 <- apply(m1, 1, mean, na.rm = TRUE)
report$m2 <- apply(m2, 1, mean, na.rm = TRUE)
report$m3 <- apply(m3, 1, mean, na.rm = TRUE)

# interpretation: if values for any model are < 0, treatment is beneficial since infarct sizes 
# are smaller in the treatment group as compared to the control group 

################################################################################


################################################################################
# data wrangling for visualization 
report_large<-report%>%
  filter(report$g_1 == -60)%>%
  gather(key = "model", value = "value", m1:m3)

report_medium<-report%>%
  filter(report$g_1 == -30)%>%
  gather(key = "model", value = "value", m1:m3)

report_small<-report%>%
  filter(report$g_1 == -10)%>%
  gather(key = "model", value = "value", m1:m3)

report_long<-rbind(report_large, report_medium, report_small)


report_long$e_w <- factor(report_long$g_1,levels = c(-60, -30, -10), 
                          labels = c("major", "moderate", "minor"))
report_long$w_s <- factor(report_long$cutoff_W, levels = c(0.2,0.3,0.5),
                          labels = c("20% attrition", "30% attrition", "50% attrition"))

#setting of styling 
cols <- RColorBrewer::brewer.pal(6, "Dark2")

################################################################################


################################################################################
# Fig 4: Visualization of collider bias effect under different scenarios of
# sample size, attrition and strength of side-effects 

fig4<- ggplot(report_long)+
  geom_point(aes(x = e_w, y = value, color = model), 
             size = 3, alpha = 0.7)+
  geom_hline(yintercept = 0, color = "red", linetype = "dashed")+
  facet_grid(cols = vars(factor(n)), 
             rows = vars(factor(w_s)))+
  scale_y_continuous(breaks = c(0, -5, -10, -15))+
  scale_color_manual(values = c(cols[1], cols[4], cols[8]), 
                       labels = c("Model 1", "Model 2", "Model 3"))+
  labs(title = "Model comparison: adjustment for initial infarct size mitigates collider stratification bias",
       y = expression("Y"^"E = 1"*"- Y"^"E = 0"), 
       x = "strength of negative side-effect of treatment on welfare")+
  theme_light()+
  theme(panel.grid.major = element_blank(),
        legend.position = "bottom", 
        legend.title = element_blank())
fig4

################################################################################
