#legend.text = element_text(size = 16),
#legend.title = element_text(face = "bold", size = 16))
setwd("C:/Users/collazoa/OneDrive - Charité - Universitätsmedizin Berlin/Dokumente/GitHub/Cancer_Reproducibility")
crp<-read.csv(file = "crp.csv", header = TRUE)
crp_ss<-crp[,c(8:9,23)]
crp_ss<-crp_ss%>%mutate(index = 1:nrow(crp_ss))
#filtering experiments that were conducted (replication sample size =! 0 )
crp_ss_conducted<-crp_ss%>%filter(!is.na(crp_ss$Replication.sample.size))
#proportion of studies with unknown initial sample size
sum(crp_ss_conducted$Original.sample.size == "unknown")
crp_ss_complete<-crp_ss_conducted%>%
filter(Original.sample.size != "unknown")%>%
mutate(Original.sample.size =  as.numeric(Original.sample.size),
Replication.sample.size = as.numeric(Replication.sample.size))%>%
mutate(rel_ss = Replication.sample.size/Original.sample.size)
sum(crp_ss_complete$Replication.sample.size > crp_ss_complete$Original.sample.size)/nrow(crp_ss_complete)
sum(crp_ss_complete$Replication.sample.size <= crp_ss_complete$Original.sample.size)/nrow(crp_ss_complete)
summary(crp_ss_complete$Original.sample.size)
nrow(crp_ss_complete)
crp_ss_complete%>%filter(crp_ss_complete$Original.sample.size>30)
#taking out extremely sample size values from gene expression studies
crp_ss_cropped<-crp_ss_complete%>%
filter(Original.sample.size<100)%>%
mutate(significance = ifelse(Replication.p.value<0.05, "yes", "no"),
reduced = ifelse(Replication.sample.size < Original.sample.size, "yes", "no"))
nrow(crp_ss_cropped)
#taking out extremely sample size values from gene expression studies
crp_ss_cropped<-crp_ss_complete%>%
filter(Original.sample.size<100)%>%
mutate(significance = ifelse(Replication.p.value<0.05, TRUE, FALSE),
reduced = ifelse(Replication.sample.size < Original.sample.size, "yes", "no"))
proportion_replication_success<-sum(crp_ss_cropped$significance)/nrow(crp_ss_cropped)
#[1] 0.4805195
result_crp<-tibble(crp_ss_cropped%>%group_by(reduced)%>%summarize(n = n(),
sig = sum(significance == "yes"),
rel_ss = median(rel_ss)))
proportion_replication_success
result_crp<-result_crp%>%mutate(prop_sig = sig/n)
result_grouped_sig <-tibble(crp_ss_cropped%>%
group_by(significance)%>%
summarize(n = n(),
rel_ss = median(rel_ss))
)
result_grouped_sig
result_crp
#[1] 0.4805195
result_crp<-tibble(crp_ss_cropped%>%group_by(reduced)%>%summarize(n = n(),
sig = sum(significance == TRUE),
rel_ss = median(rel_ss)))
result_crp<-result_crp%>%mutate(prop_sig = sig/n)
result_crp
crp.sample.size<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size),
color = cols[1], alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
ylab("total replication sample size")+
xlab("total original sample size")+
ggtitle(expression(paste(bold("A: "), "Reproducibility Project: Cancer Biology")))+
letter
crp.sample.size
#visualization replication p-value and sample size choices
setting <- theme(plot.title = element_text(face = "bold", size = 20),
plot.subtitle = element_text( size = 18),
axis.title.x = element_text(face = "bold", size = 18, vjust = 1),
axis.title.y = element_text(face = "bold", size = 18, vjust = 2),
axis.text = element_text(face = "bold", size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(face = "bold", size = 16),
plot.margin = margin(1,1,1.2,1, "cm"))
crp.sig.ss<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size, col = significance),
alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
scale_color_manual(values = c(cols[4],cols[1]))+
labs(
y = "total replication sample size",
x = "total original sample size",
color = "p-value < 0.05")+
ggtitle("Relative sample size and replication success",
subtitle = "Reproducibility Project: Cancer Biology")+
setting
crp.sig.ss
crp.boxplot.rel_ss.sig<-
ggplot(crp_ss_cropped)+ geom_boxplot(aes(x = significance, y = rel_ss, color = significance),
show.legend = FALSE, lwd = 0.9)+
labs(y = "relative increase of sample size",
x = "p-value < 0.05")+
coord_cartesian(ylim = c(0,3))+
ggtitle("Is the relative sample size related to replication success?",
subtitle = "Median increase in sample size for failed and successfully replicated experiments in Reproducibility Project: Cancer Biology")+
setting
crp.boxplot.rel_ss.sig
result_grouped_sig
crp.boxplot.rel_ss.sig
View(crp_ss_complete)
View(crp_ss)
crp<-read.csv(file = "crp.csv", header = TRUE)
#crp_ss<-crp[,c(8:9,23)]
crp<-crp%>%mutate(index = 1:nrow(crp_ss))
#filtering experiments that were conducted (replication sample size =! 0 )
crp_ss_conducted<-crp_ss%>%filter(!is.na(crp_ss$Replication.sample.size))
#filtering experiments that were conducted (replication sample size =! 0 )
crp_ss_conducted<-crp%>%filter(!is.na(crp_ss$Replication.sample.size))
#proportion of studies with unknown initial sample size
sum(crp_ss_conducted$Original.sample.size == "unknown")
nrow(crp_ss_conducted)
nrow(crp)
#proportion of studies with unknown initial sample size
sum(crp_ss_conducted$Original.sample.size == "unknown")
crp_ss_complete<-crp_ss_conducted%>%
filter(Original.sample.size != "unknown")%>%
mutate(Original.sample.size =  as.numeric(Original.sample.size),
Replication.sample.size = as.numeric(Replication.sample.size))%>%
mutate(rel_ss = Replication.sample.size/Original.sample.size)
nrow(crp_ss_complete)
sum(crp_ss_complete$Replication.sample.size > crp_ss_complete$Original.sample.size)/nrow(crp_ss_complete)
sum(crp_ss_complete$Replication.sample.size > crp_ss_complete$Original.sample.size)
sum(crp_ss_complete$Replication.sample.size <= crp_ss_complete$Original.sample.size)
sum(crp_ss_complete$Replication.sample.size >= crp_ss_complete$Original.sample.size)/nrow(crp_ss_complete)
sum(crp_ss_complete$Replication.sample.size > crp_ss_complete$Original.sample.size)
#taking out extremely sample size values from gene expression studies
crp_ss_cropped<-crp_ss_complete%>%
filter(Original.sample.size<100)%>%
mutate(significance = ifelse(Replication.p.value<0.05, TRUE, FALSE),
increased = ifelse(Replication.sample.size > Original.sample.size, TRUE, FALSE))
crp_ss_cropped%>%filter(significance == TRUE & Replication.effect.size<0)
crp$Original.effect.size<0
sum(crp$Original.effect.size)
sum(crp$Original.effect.size, na.rm = TRUE)
sum(crp$Original.effect.size<0, na.rm = TRUE)
sum(crp$Original.effect.size<=0, na.rm = TRUE)
#taking out extremely sample size values from gene expression studies
crp_ss_cropped<-crp_ss_complete%>%
filter(Original.sample.size<100)%>%
mutate(significance = ifelse(Replication.p.value<0.05, TRUE, FALSE),
increased = ifelse(Replication.sample.size > Original.sample.size, TRUE, FALSE),
direction = ifelse(Replication.effect.size >0, TRUE, FALSE)
)
nrwo(crp_ss_cropped%>%filter(significance == TRUE & Replication.effect.size<0))
nrow(crp_ss_cropped%>%filter(significance == TRUE & Replication.effect.size<0))
nrow(crp_ss_cropped%>%filter(direction == FALSE))
proportion_replication_success<-nrow(crp_ss_cropped%>%filter(significance == TRUE & direction == TRUE))/nrow(crp_ss_cropped)
proportion_replication_success
#[1] 0.4
result_crp<-tibble(crp_ss_cropped%>%group_by(increased)%>%summarize(n = n(),
sig = sum(significance == TRUE & direction == TRUE),
rel_ss = median(rel_ss)))
result_crp
result_crp<-result_crp%>%mutate(prop_sig = sig/n)
result_crp
nrow(crp_ss_cropped)
nrow(crp_ss_complete)
sum(crp_ss_complete$Original.sample.size>100)
nrow(crp_ss_cropped%>%filter(direction == FALSE))
nrow(crp_ss_cropped%>%filter(significance == TRUE & direction == TRUE))
nrow(crp_ss_cropped%>%filter(direction == FALSE & significance == TRUE))
#[1] 0.4
result_crp<-tibble(crp_ss_cropped%>%group_by(increased)%>%summarize(n = n(),
sig_pos = sum(significance == TRUE & direction == TRUE),
rel_ss = median(rel_ss)))
result_crp<-result_crp%>%mutate(prop_sig = sig/n)
result_crp<-result_crp%>%mutate(prop_sig = sig_pos/n)
result_crp
#[1] 0.4
result_crp<-tibble(crp_ss_cropped%>%group_by(increased)%>%summarize(n = n(),
sig_pos = sum(significance == TRUE & direction == TRUE),
sig_neg = sum(significance == TRUE & direction == FALSE),
non_sig = sum(signifiance == FALSE)
rel_ss = median(rel_ss)))
#[1] 0.4
result_crp<-tibble(crp_ss_cropped%>%group_by(increased)%>%summarize(n = n(),
sig_pos = sum(significance == TRUE & direction == TRUE),
sig_neg = sum(significance == TRUE & direction == FALSE),
non_sig = sum(signifiance == FALSE),
rel_ss = median(rel_ss)))
#[1] 0.4
result_crp<-tibble(crp_ss_cropped%>%group_by(increased)%>%summarize(n = n(),
sig_pos = sum(significance == TRUE & direction == TRUE),
sig_neg = sum(significance == TRUE & direction == FALSE),
non_sig = sum(significance == FALSE),
rel_ss = median(rel_ss)))
result_crp<-result_crp%>%mutate(prop_sig = sig_pos/n)
result_crp
write.csv("summary_crp.csv", header = TRUE)
write.csv("summary_crp.csv")
getwd()
write.csv("summary_crp.csv")
write.csv(result_crp, ".\summary_crp.csv", row.names = FALSE)
write.csv(result_crp, "./summary_crp.csv", row.names = FALSE)
#taking out extremely sample size values from gene expression studies
crp_ss_cropped<-crp_ss_complete%>%
filter(Original.sample.size<100)%>%
mutate(significance = ifelse(Replication.p.value<0.05, TRUE, FALSE),
increased = ifelse(Replication.sample.size > Original.sample.size, TRUE, FALSE),
direction = ifelse(Replication.effect.size >0, TRUE, FALSE),
sig_dir = ifelse(significance == TRUE & direction == TRUE, TRUE, FALSE)
)
sum(crp_ss_cropped$sig_dir == TRUE)
result_crp
proportion_replication_success
crp.sig.ss<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size, col = sig_dir),
alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
scale_color_manual(values = c(cols[4],cols[1]))+
labs(
y = "total replication sample size",
x = "total original sample size",
color = "p-value < 0.05")+
ggtitle("Relative sample size and replication success",
subtitle = "Reproducibility Project: Cancer Biology")+
setting
crp.sig.ss
crp.sig.ss<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size, col = sig_dir),
alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
scale_color_manual(values = c(cols[4],cols[1]))+
labs(
y = "total replication sample size",
x = "total original sample size",
color = "replication success")+
ggtitle("Relative sample size and replication success",
subtitle = "Reproducibility Project: Cancer Biology")+
setting
crp.sig.ss
crp.boxplot.rel_ss.sig<-
ggplot(crp_ss_cropped)+ geom_boxplot(aes(x = significance, y = rel_ss, color = sig_dir),
show.legend = FALSE, lwd = 0.9)+
labs(y = "relative increase of sample size",
x = "p-value < 0.05")+
coord_cartesian(ylim = c(0,3))+
ggtitle("Is the relative sample size related to replication success?",
subtitle = "Median increase in sample size for failed and successfully replicated experiments in Reproducibility Project: Cancer Biology")+
setting
crp.boxplot.rel_ss.sig
crp.boxplot.rel_ss.sig<-
ggplot(crp_ss_cropped)+ geom_boxplot(aes(x = sig_dir, y = rel_ss, color = sig_dir),
show.legend = FALSE, lwd = 0.9)+
labs(y = "relative increase of sample size",
x = "p-value < 0.05")+
coord_cartesian(ylim = c(0,3))+
ggtitle("Is the relative sample size related to replication success?",
subtitle = "Median increase in sample size for failed and successfully replicated experiments in Reproducibility Project: Cancer Biology")+
setting
crp.boxplot.rel_ss.sig
crp.boxplot.rel_ss.sig<-
ggplot(crp_ss_cropped)+ geom_boxplot(aes(x = sig_dir, y = rel_ss, color = sig_dir),
show.legend = FALSE, lwd = 0.9)+
labs(y = "relative increase of sample size",
x = "replication success")+
coord_cartesian(ylim = c(0,3))+
ggtitle("Is the relative sample size related to replication success?",
subtitle = "Median increase in sample size for failed and successfully replicated experiments in Reproducibility Project: Cancer Biology")+
setting
result_grouped_sig <-tibble(crp_ss_cropped%>%
group_by(sig_dir)%>%
summarize(n = n(),
rel_ss = median(rel_ss))
)
result_grouped_sig
result_grouped_sig <-tibble(crp_ss_cropped%>%
group_by(sig_dir)%>%
summarize(n = n(),
increased = sum(increased),
rel_ss = median(rel_ss))
)
result_grouped_sig
17/48
13/32
crp.sig.ss<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size, col = sig_dir),
alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
scale_color_manual(values = c(cols[4],cols[1]))+
labs(
y = "total replication sample size",
x = "total original sample size",
color = "replication success")+
ggtitle("Relative sample size and replication success",
subtitle = "Reproducibility Project: Cancer Biology")+
setting
crp.sig.ss
result_crp<-result_crp%>%mutate(prop_sig = sig_pos/n)
result_crp
crp.sample.size
crp.sig.ss
#cropped to improve visualization
crp.sig.ss<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size, col = sig_dir),
alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
scale_color_manual(values = c(cols[4],cols[1]))+
labs(
y = "total replication sample size",
x = "total original sample size",
color = "replication success")+
ggtitle("Relative sample size and replication success",
subtitle = "Reproducibility Project: Cancer Biology")+
coord_cartesian(xlim = c(0,50), ylim= c(0,40))+
setting
crp.sig.ss
#cropped to improve visualization
crp.sig.ss.cropped<-
ggplot(crp_ss_cropped) +
geom_jitter(aes(x = Original.sample.size, y = Replication.sample.size, col = sig_dir),
alpha = 0.5, width = 0.3, size = 5)+
geom_abline(intercept = 0, slope = 1, lty = "dashed")+
scale_color_manual(values = c(cols[4],cols[1]))+
labs(
y = "total replication sample size",
x = "total original sample size",
color = "replication success")+
ggtitle("Relative sample size and replication success",
subtitle = "Reproducibility Project: Cancer Biology")+
coord_cartesian(xlim = c(0,50), ylim= c(0,40))+
setting
crp.sig.ss.cropped
setwd("C:/Users/collazoa/OneDrive - Charité - Universitätsmedizin Berlin/Dokumente/GitHub/Cancer_Reproducibility")
crp<-read.csv(file = "crp.csv", header = TRUE)
orig.dataset<-nrow(crp)
#selecting columns
coln<-c("Original.p.value", "Replication.p.value",
"Original.sample.size","Replication.sample.size",
"Effect.size.type", "Original.effect.size",
"Original.standard.error","Original.lower.CI",
"Original.upper.CI","Replication.effect.size",
"Replication.standard.error","Replication.lower.CI",
"Replication.upper.CI")
x<-NULL
for (i in 1:length(coln)){
x[i]<-which(colnames(crp) == coln[i])
}
print(x)
crp<-crp<-crp[,x]
#removing rows with NAs
y<-list()
for (i in 1:length(x)) {
y[i]<-list(which(is.na(crp[,i])))
}
remove<-sort(unique(unlist(y)))
a<-1:nrow(crp)
remove_boolean<-c(a %in% remove)
crp$remove<-remove_boolean
crp<-crp%>%filter(remove_boolean == FALSE)
nrow(crp)
#loading dataset
setwd("C:/Users/collazoa/OneDrive - Charité - Universitätsmedizin Berlin/Dokumente/GitHub/Cancer_Reproducibility")
crp<-read.csv(file = "crp.csv", header = TRUE)
orig.dataset<-nrow(crp)
crp<-crp%>%mutate(index = 1:nrow(crp_ss))
#filtering experiments that were conducted (replication sample size =! NA )
crp_ss_conducted<-crp%>%filter(!is.na(crp_ss$Replication.sample.size))
#proportion of studies with unknown initial sample size
sum(crp_ss_conducted$Original.sample.size == "unknown")
#selecting columns
#coln<-c("Original.p.value", "Replication.p.value",
#        "Original.sample.size","Replication.sample.size",
#        "Effect.size.type", "Original.effect.size",
#        "Original.standard.error","Original.lower.CI",
#        "Original.upper.CI","Replication.effect.size",
#        "Replication.standard.error","Replication.lower.CI",
#        "Replication.upper.CI")
x<-NULL
for (i in 1:length(coln)){
x[i]<-which(colnames(crp) == coln[i])
}
print(x)
crp<-crp[,x]
#removing rows with NAs
y<-list()
for (i in 1:length(x)) {
y[i]<-list(which(is.na(crp[,i])))
}
remove<-sort(unique(unlist(y)))
a<-1:nrow(crp)
remove_boolean<-c(a %in% remove)
crp$remove<-remove_boolean
crp<-crp%>%filter(remove_boolean == FALSE)
nrow(crp)
#taking out extremely sample size values from gene expression studies
crp<-crp_ss_complete%>%
filter(Original.sample.size<100)%>%
mutate(significance = ifelse(Replication.p.value<0.05, TRUE, FALSE),
increased = ifelse(Replication.sample.size > Original.sample.size, TRUE, FALSE),
direction = ifelse(Replication.effect.size >0, TRUE, FALSE),
sig_dir = ifelse(significance == TRUE & direction == TRUE, TRUE, FALSE)
)
#selecting columns
coln<-c("Original.p.value", "Replication.p.value",
"Original.sample.size","Replication.sample.size",
"Effect.size.type", "Original.effect.size",
"Original.standard.error","Original.lower.CI",
"Original.upper.CI","Replication.effect.size",
"Replication.standard.error","Replication.lower.CI",
"Replication.upper.CI")
x<-NULL
for (i in 1:length(coln)){
x[i]<-which(colnames(crp) == coln[i])
}
print(x)
crp<-crp[,x]
#removing rows with NAs
y<-list()
for (i in 1:length(x)) {
y[i]<-list(which(is.na(crp[,i])))
}
remove<-sort(unique(unlist(y)))
a<-1:nrow(crp)
remove_boolean<-c(a %in% remove)
crp$remove<-remove_boolean
crp<-crp%>%filter(remove_boolean == FALSE)
nrow(crp)
crp$index<-1:nrow(crp)
crp$remove<-NULL
#transforming variables to numeric
which(colnames(crp) == "Effect.size.type")
#5
vec1<-c(1:4, 6:ncol(crp))
for (i in vec1) {
crp[,i]<-as.numeric(crp[,i])
}
str(crp)
boxplot(crp$Original.sample.size)
crp%>%group_by(Effect.size.type)%>%summarize(n = n())
crp%>%group_by(Effect.size.type)%>%summarize(n = n())%>%summarize(sum = sum(n))
crp<-crp%>%filter(Effect.size.type != "Hazard ratio")
crp$Original.d.meta<-numeric(length(nrow(crp)))
crp$Replication.d.meta<-numeric(length(nrow(crp)))
for (i in 1:nrow(crp)) {
if (crp$Effect.size.type[i]!= "r" & crp$Effect.size.type[i] != "Spearman's r") {
crp$Original.d.meta[i]<- crp$Original.effect.size[i]
crp$Replication.d.meta[i]<-crp$Replication.effect.size[i]
} else {
crp$Original.d.meta[i]<-r_to_d(crp$Original.effect.size[i])
crp$Replication.d.meta[i]<-r_to_d(crp$Replication.effect.size[i])
}
}
sum(crp$Replication.effect.size<0)
sum(crp$Replication.d.meta<0)
sum(crp$Original.effect.size<0)
crp$shrinkage<-((crp$Replication.d.meta/crp$Original.d.meta)-1)*100
ggplot(crp) +
geom_point(aes(y = shrinkage, x = index),
color = cols[1],
alpha = 0.5,
size = 4)+
geom_abline(intercept = median(crp$shrinkage),
slope = 0,
lty = "longdash",
alpha = 1,
size = 1) +
geom_abline(intercept = quantile(crp$shrinkage, 0.25),
slope = 0,
lty = "dotted",
alpha = 0.7,
size = 1)+
geom_abline(intercept = quantile(crp$shrinkage, 0.75),
slope = 0,
lty = "dotted",
alpha = 0.7,
size = 1)+
coord_cartesian(ylim = c(-200,50))+
labs(y = "relative percentage change in Cohen's",
x = "experiment index number")+
ggtitle("Observed effect size reduction in the Reproducibility Project: Cancer Biology",
subtitle = "All effect sizes transformed or reported as Cohen's d")+
letter
ggplot(crp)+
geom_boxplot(aes(y = shrinkage),
color = cols[1])+
coord_cartesian(ylim = c(-200,50))+
labs(y = "relative percentage change in Cohen's")+
ggtitle("Observed effect size reduction in the Reproducibility Project: Cancer Biology",
subtitle = "All effect sizes transformed or reported as Cohen's d")+
letter+
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot() +
geom_boxplot(data = crp, aes(y = shrinkage, x = 35),
color = cols[1],
width = 50,
size = 1)+
geom_point(data = crp, aes(y = shrinkage, x = index),
color = cols[1],
alpha = 0.3,
size = 4)+
coord_cartesian(ylim = c(-200,50))+
labs(y = "relative percentage change in Cohen's",
x = "experiment index number")+
ggtitle("Observed effect size reduction in the Reproducibility Project: Cancer Biology",
subtitle = "All effect sizes transformed or reported as Cohen's d")+
letter
setwd("C:/Users/collazoa/OneDrive - Charité - Universitätsmedizin Berlin/Dokumente/GitHub/Cancer_Reproducibility")
crp<-read.csv(file = "crp.csv", header = TRUE)
str(crp)
setwd("C:/Users/collazoa/OneDrive - Charité - Universitätsmedizin Berlin/Dokumente/GitHub/Bonapersona")
sel <- (is.na(bp$n_t)==FALSE & is.na(bp$yi) == FALSE & (bp$yi != FALSE))
setwd("C:/Users/collazoa/OneDrive - Charité - Universitätsmedizin Berlin/Dokumente/GitHub/LAB_DAG/")
DIW<-read.csv(file = "DIW_time_series_Neumann_Haefelin.csv", sep = ";", header = TRUE)
DIW<-read.csv(file = "DIW_time_series_Neumann_Haefelin.csv", sep = ";", header = TRUE)
View(DIW)
for (i in 1:nrow(DIW)) {
DIW$normalized_DWI<-as.numeric(DIW$normalized_DWI)
DIW$rel_change[i]<-DIW$normalized_DWI[i]/DIW$normalized_DWI[2]
}
